//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace b2Sharp {

public class b2EdgeShape : b2Shape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal b2EdgeShape(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Box2DPINVOKE.b2EdgeShape_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2EdgeShape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2EdgeShape(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public b2EdgeShape() : this(Box2DPINVOKE.new_b2EdgeShape(), true) {
  }

  public void Set(b2Vec2 v1, b2Vec2 v2) {
    Box2DPINVOKE.b2EdgeShape_Set(swigCPtr, b2Vec2.getCPtr(v1), b2Vec2.getCPtr(v2));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public override b2Shape Clone(b2BlockAllocator allocator) {
    global::System.IntPtr cPtr = Box2DPINVOKE.b2EdgeShape_Clone(swigCPtr, b2BlockAllocator.getCPtr(allocator));
    b2Shape ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Shape(cPtr, false);
    return ret;
  }

  public override int GetChildCount() {
    int ret = Box2DPINVOKE.b2EdgeShape_GetChildCount(swigCPtr);
    return ret;
  }

  public override bool TestPoint(b2Transform transform, b2Vec2 p) {
    bool ret = Box2DPINVOKE.b2EdgeShape_TestPoint(swigCPtr, b2Transform.getCPtr(transform), b2Vec2.getCPtr(p));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool RayCast(b2RayCastOutput output, b2RayCastInput input, b2Transform transform, int childIndex) {
    bool ret = Box2DPINVOKE.b2EdgeShape_RayCast(swigCPtr, b2RayCastOutput.getCPtr(output), b2RayCastInput.getCPtr(input), b2Transform.getCPtr(transform), childIndex);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ComputeAABB(b2AABB aabb, b2Transform transform, int childIndex) {
    Box2DPINVOKE.b2EdgeShape_ComputeAABB(swigCPtr, b2AABB.getCPtr(aabb), b2Transform.getCPtr(transform), childIndex);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ComputeMass(b2MassData massData, float density) {
    Box2DPINVOKE.b2EdgeShape_ComputeMass(swigCPtr, b2MassData.getCPtr(massData), density);
  }

  public b2Vec2 m_vertex1 {
    set {
      Box2DPINVOKE.b2EdgeShape_m_vertex1_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2EdgeShape_m_vertex1_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2Vec2 m_vertex2 {
    set {
      Box2DPINVOKE.b2EdgeShape_m_vertex2_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2EdgeShape_m_vertex2_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2Vec2 m_vertex0 {
    set {
      Box2DPINVOKE.b2EdgeShape_m_vertex0_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2EdgeShape_m_vertex0_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2Vec2 m_vertex3 {
    set {
      Box2DPINVOKE.b2EdgeShape_m_vertex3_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2EdgeShape_m_vertex3_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public bool m_hasVertex0 {
    set {
      Box2DPINVOKE.b2EdgeShape_m_hasVertex0_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.b2EdgeShape_m_hasVertex0_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_hasVertex3 {
    set {
      Box2DPINVOKE.b2EdgeShape_m_hasVertex3_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.b2EdgeShape_m_hasVertex3_get(swigCPtr);
      return ret;
    } 
  }

}

}
