//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Box2DCS {

public class b2PolygonShape : b2Shape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal b2PolygonShape(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Box2DPINVOKE.b2PolygonShape_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2PolygonShape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2PolygonShape(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public b2PolygonShape() : this(Box2DPINVOKE.new_b2PolygonShape(), true) {
  }

  public override b2Shape Clone(b2BlockAllocator allocator) {
    global::System.IntPtr cPtr = Box2DPINVOKE.b2PolygonShape_Clone(swigCPtr, b2BlockAllocator.getCPtr(allocator));
    b2Shape ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Shape(cPtr, false);
    return ret;
  }

  public override int GetChildCount() {
    int ret = Box2DPINVOKE.b2PolygonShape_GetChildCount(swigCPtr);
    return ret;
  }

  public void Set(b2Vec2 points, int count) {
    Box2DPINVOKE.b2PolygonShape_Set(swigCPtr, b2Vec2.getCPtr(points), count);
  }

  public void SetAsBox(float hx, float hy) {
    Box2DPINVOKE.b2PolygonShape_SetAsBox__SWIG_0(swigCPtr, hx, hy);
  }

  public void SetAsBox(float hx, float hy, b2Vec2 center, float angle) {
    Box2DPINVOKE.b2PolygonShape_SetAsBox__SWIG_1(swigCPtr, hx, hy, b2Vec2.getCPtr(center), angle);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool TestPoint(b2Transform transform, b2Vec2 p) {
    bool ret = Box2DPINVOKE.b2PolygonShape_TestPoint(swigCPtr, b2Transform.getCPtr(transform), b2Vec2.getCPtr(p));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool RayCast(b2RayCastOutput output, b2RayCastInput input, b2Transform transform, int childIndex) {
    bool ret = Box2DPINVOKE.b2PolygonShape_RayCast(swigCPtr, b2RayCastOutput.getCPtr(output), b2RayCastInput.getCPtr(input), b2Transform.getCPtr(transform), childIndex);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ComputeAABB(b2AABB aabb, b2Transform transform, int childIndex) {
    Box2DPINVOKE.b2PolygonShape_ComputeAABB(swigCPtr, b2AABB.getCPtr(aabb), b2Transform.getCPtr(transform), childIndex);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ComputeMass(b2MassData massData, float density) {
    Box2DPINVOKE.b2PolygonShape_ComputeMass(swigCPtr, b2MassData.getCPtr(massData), density);
  }

  public bool Validate() {
    bool ret = Box2DPINVOKE.b2PolygonShape_Validate(swigCPtr);
    return ret;
  }

  public b2Vec2 m_centroid {
    set {
      Box2DPINVOKE.b2PolygonShape_m_centroid_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2PolygonShape_m_centroid_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2Vec2 m_vertices {
    set {
      Box2DPINVOKE.b2PolygonShape_m_vertices_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2PolygonShape_m_vertices_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public b2Vec2 m_normals {
    set {
      Box2DPINVOKE.b2PolygonShape_m_normals_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2PolygonShape_m_normals_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public int m_count {
    set {
      Box2DPINVOKE.b2PolygonShape_m_count_set(swigCPtr, value);
    } 
    get {
      int ret = Box2DPINVOKE.b2PolygonShape_m_count_get(swigCPtr);
      return ret;
    } 
  }

}

}
