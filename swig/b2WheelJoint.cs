//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace b2Sharp {

public class b2WheelJoint : b2Joint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal b2WheelJoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Box2DPINVOKE.b2WheelJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2WheelJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_b2WheelJoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override b2Vec2 GetAnchorA() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2WheelJoint_GetAnchorA(swigCPtr), true);
    return ret;
  }

  public override b2Vec2 GetAnchorB() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2WheelJoint_GetAnchorB(swigCPtr), true);
    return ret;
  }

  public override b2Vec2 GetReactionForce(float inv_dt) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2WheelJoint_GetReactionForce(swigCPtr, inv_dt), true);
    return ret;
  }

  public override float GetReactionTorque(float inv_dt) {
    float ret = Box2DPINVOKE.b2WheelJoint_GetReactionTorque(swigCPtr, inv_dt);
    return ret;
  }

  public b2Vec2 GetLocalAnchorA() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2WheelJoint_GetLocalAnchorA(swigCPtr), false);
    return ret;
  }

  public b2Vec2 GetLocalAnchorB() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2WheelJoint_GetLocalAnchorB(swigCPtr), false);
    return ret;
  }

  public b2Vec2 GetLocalAxisA() {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2WheelJoint_GetLocalAxisA(swigCPtr), false);
    return ret;
  }

  public float GetJointTranslation() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetJointTranslation(swigCPtr);
    return ret;
  }

  public float GetJointLinearSpeed() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetJointLinearSpeed(swigCPtr);
    return ret;
  }

  public float GetJointAngle() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetJointAngle(swigCPtr);
    return ret;
  }

  public float GetJointAngularSpeed() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetJointAngularSpeed(swigCPtr);
    return ret;
  }

  public bool IsLimitEnabled() {
    bool ret = Box2DPINVOKE.b2WheelJoint_IsLimitEnabled(swigCPtr);
    return ret;
  }

  public void EnableLimit(bool flag) {
    Box2DPINVOKE.b2WheelJoint_EnableLimit(swigCPtr, flag);
  }

  public float GetLowerLimit() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetLowerLimit(swigCPtr);
    return ret;
  }

  public float GetUpperLimit() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetUpperLimit(swigCPtr);
    return ret;
  }

  public void SetLimits(float lower, float upper) {
    Box2DPINVOKE.b2WheelJoint_SetLimits(swigCPtr, lower, upper);
  }

  public bool IsMotorEnabled() {
    bool ret = Box2DPINVOKE.b2WheelJoint_IsMotorEnabled(swigCPtr);
    return ret;
  }

  public void EnableMotor(bool flag) {
    Box2DPINVOKE.b2WheelJoint_EnableMotor(swigCPtr, flag);
  }

  public void SetMotorSpeed(float speed) {
    Box2DPINVOKE.b2WheelJoint_SetMotorSpeed(swigCPtr, speed);
  }

  public float GetMotorSpeed() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetMotorSpeed(swigCPtr);
    return ret;
  }

  public void SetMaxMotorTorque(float torque) {
    Box2DPINVOKE.b2WheelJoint_SetMaxMotorTorque(swigCPtr, torque);
  }

  public float GetMaxMotorTorque() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetMaxMotorTorque(swigCPtr);
    return ret;
  }

  public float GetMotorTorque(float inv_dt) {
    float ret = Box2DPINVOKE.b2WheelJoint_GetMotorTorque(swigCPtr, inv_dt);
    return ret;
  }

  public void SetStiffness(float stiffness) {
    Box2DPINVOKE.b2WheelJoint_SetStiffness(swigCPtr, stiffness);
  }

  public float GetStiffness() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetStiffness(swigCPtr);
    return ret;
  }

  public void SetDamping(float damping) {
    Box2DPINVOKE.b2WheelJoint_SetDamping(swigCPtr, damping);
  }

  public float GetDamping() {
    float ret = Box2DPINVOKE.b2WheelJoint_GetDamping(swigCPtr);
    return ret;
  }

  public override void Dump() {
    Box2DPINVOKE.b2WheelJoint_Dump(swigCPtr);
  }

  public override void Draw(b2Draw draw) {
    Box2DPINVOKE.b2WheelJoint_Draw(swigCPtr, b2Draw.getCPtr(draw));
  }

}

}
