//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace b2Sharp {

public class Box2D {
  public static SWIGTYPE_p_void b2Alloc(int size) {
    global::System.IntPtr cPtr = Box2DPINVOKE.b2Alloc(size);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void b2Free(SWIGTYPE_p_void mem) {
    Box2DPINVOKE.b2Free(SWIGTYPE_p_void.getCPtr(mem));
  }

  public static void b2Log(string string_) {
    Box2DPINVOKE.b2Log(string_);
  }

  public static void b2OpenDump(string fileName) {
    Box2DPINVOKE.b2OpenDump(fileName);
  }

  public static void b2Dump(string string_) {
    Box2DPINVOKE.b2Dump(string_);
  }

  public static void b2CloseDump() {
    Box2DPINVOKE.b2CloseDump();
  }

  public static b2Version b2_version {
    set {
      Box2DPINVOKE.b2_version_set(b2Version.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2_version_get();
      b2Version ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Version(cPtr, false);
      return ret;
    } 
  }

  public static bool b2IsValid(float x) {
    bool ret = Box2DPINVOKE.b2IsValid(x);
    return ret;
  }

  public static b2Vec2 b2Vec2_zero {
    get {
      global::System.IntPtr cPtr = Box2DPINVOKE.b2Vec2_zero_get();
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public static float b2Dot(b2Vec2 a, b2Vec2 b) {
    float ret = Box2DPINVOKE.b2Dot__SWIG_0(b2Vec2.getCPtr(a), b2Vec2.getCPtr(b));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float b2Cross(b2Vec2 a, b2Vec2 b) {
    float ret = Box2DPINVOKE.b2Cross__SWIG_0(b2Vec2.getCPtr(a), b2Vec2.getCPtr(b));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Cross(b2Vec2 a, float s) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Cross__SWIG_1(b2Vec2.getCPtr(a), s), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Cross(float s, b2Vec2 a) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Cross__SWIG_2(s, b2Vec2.getCPtr(a)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Mul(b2Mat22 A, b2Vec2 v) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Mul__SWIG_0(b2Mat22.getCPtr(A), b2Vec2.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2MulT(b2Mat22 A, b2Vec2 v) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2MulT__SWIG_0(b2Mat22.getCPtr(A), b2Vec2.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float b2Distance(b2Vec2 a, b2Vec2 b) {
    float ret = Box2DPINVOKE.b2Distance(b2Vec2.getCPtr(a), b2Vec2.getCPtr(b));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float b2DistanceSquared(b2Vec2 a, b2Vec2 b) {
    float ret = Box2DPINVOKE.b2DistanceSquared(b2Vec2.getCPtr(a), b2Vec2.getCPtr(b));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float b2Dot(b2Vec3 a, b2Vec3 b) {
    float ret = Box2DPINVOKE.b2Dot__SWIG_1(b2Vec3.getCPtr(a), b2Vec3.getCPtr(b));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec3 b2Cross(b2Vec3 a, b2Vec3 b) {
    b2Vec3 ret = new b2Vec3(Box2DPINVOKE.b2Cross__SWIG_3(b2Vec3.getCPtr(a), b2Vec3.getCPtr(b)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Mat22 b2Mul(b2Mat22 A, b2Mat22 B) {
    b2Mat22 ret = new b2Mat22(Box2DPINVOKE.b2Mul__SWIG_1(b2Mat22.getCPtr(A), b2Mat22.getCPtr(B)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Mat22 b2MulT(b2Mat22 A, b2Mat22 B) {
    b2Mat22 ret = new b2Mat22(Box2DPINVOKE.b2MulT__SWIG_1(b2Mat22.getCPtr(A), b2Mat22.getCPtr(B)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec3 b2Mul(b2Mat33 A, b2Vec3 v) {
    b2Vec3 ret = new b2Vec3(Box2DPINVOKE.b2Mul__SWIG_2(b2Mat33.getCPtr(A), b2Vec3.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Mul22(b2Mat33 A, b2Vec2 v) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Mul22(b2Mat33.getCPtr(A), b2Vec2.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Rot b2Mul(b2Rot q, b2Rot r) {
    b2Rot ret = new b2Rot(Box2DPINVOKE.b2Mul__SWIG_3(b2Rot.getCPtr(q), b2Rot.getCPtr(r)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Rot b2MulT(b2Rot q, b2Rot r) {
    b2Rot ret = new b2Rot(Box2DPINVOKE.b2MulT__SWIG_2(b2Rot.getCPtr(q), b2Rot.getCPtr(r)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Mul(b2Rot q, b2Vec2 v) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Mul__SWIG_4(b2Rot.getCPtr(q), b2Vec2.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2MulT(b2Rot q, b2Vec2 v) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2MulT__SWIG_3(b2Rot.getCPtr(q), b2Vec2.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Mul(b2Transform T, b2Vec2 v) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Mul__SWIG_5(b2Transform.getCPtr(T), b2Vec2.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2MulT(b2Transform T, b2Vec2 v) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2MulT__SWIG_4(b2Transform.getCPtr(T), b2Vec2.getCPtr(v)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Transform b2Mul(b2Transform A, b2Transform B) {
    b2Transform ret = new b2Transform(Box2DPINVOKE.b2Mul__SWIG_6(b2Transform.getCPtr(A), b2Transform.getCPtr(B)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Transform b2MulT(b2Transform A, b2Transform B) {
    b2Transform ret = new b2Transform(Box2DPINVOKE.b2MulT__SWIG_5(b2Transform.getCPtr(A), b2Transform.getCPtr(B)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Abs(b2Vec2 a) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Abs__SWIG_1(b2Vec2.getCPtr(a)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Mat22 b2Abs(b2Mat22 A) {
    b2Mat22 ret = new b2Mat22(Box2DPINVOKE.b2Abs__SWIG_2(b2Mat22.getCPtr(A)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Min(b2Vec2 a, b2Vec2 b) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Min(b2Vec2.getCPtr(a), b2Vec2.getCPtr(b)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Max(b2Vec2 a, b2Vec2 b) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Max(b2Vec2.getCPtr(a), b2Vec2.getCPtr(b)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static b2Vec2 b2Clamp(b2Vec2 a, b2Vec2 low, b2Vec2 high) {
    b2Vec2 ret = new b2Vec2(Box2DPINVOKE.b2Clamp(b2Vec2.getCPtr(a), b2Vec2.getCPtr(low), b2Vec2.getCPtr(high)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint b2NextPowerOfTwo(uint x) {
    uint ret = Box2DPINVOKE.b2NextPowerOfTwo(x);
    return ret;
  }

  public static bool b2IsPowerOfTwo(uint x) {
    bool ret = Box2DPINVOKE.b2IsPowerOfTwo(x);
    return ret;
  }

  public static byte b2_nullFeature {
    get {
      byte ret = Box2DPINVOKE.b2_nullFeature_get();
      return ret;
    } 
  }

  public static void b2GetPointStates(SWIGTYPE_p_b2PointState state1, SWIGTYPE_p_b2PointState state2, b2Manifold manifold1, b2Manifold manifold2) {
    Box2DPINVOKE.b2GetPointStates(SWIGTYPE_p_b2PointState.getCPtr(state1), SWIGTYPE_p_b2PointState.getCPtr(state2), b2Manifold.getCPtr(manifold1), b2Manifold.getCPtr(manifold2));
  }

  public static void b2CollideCircles(b2Manifold manifold, b2CircleShape circleA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB) {
    Box2DPINVOKE.b2CollideCircles(b2Manifold.getCPtr(manifold), b2CircleShape.getCPtr(circleA), b2Transform.getCPtr(xfA), b2CircleShape.getCPtr(circleB), b2Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollidePolygonAndCircle(b2Manifold manifold, b2PolygonShape polygonA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB) {
    Box2DPINVOKE.b2CollidePolygonAndCircle(b2Manifold.getCPtr(manifold), b2PolygonShape.getCPtr(polygonA), b2Transform.getCPtr(xfA), b2CircleShape.getCPtr(circleB), b2Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollidePolygons(b2Manifold manifold, b2PolygonShape polygonA, b2Transform xfA, b2PolygonShape polygonB, b2Transform xfB) {
    Box2DPINVOKE.b2CollidePolygons(b2Manifold.getCPtr(manifold), b2PolygonShape.getCPtr(polygonA), b2Transform.getCPtr(xfA), b2PolygonShape.getCPtr(polygonB), b2Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollideEdgeAndCircle(b2Manifold manifold, b2EdgeShape polygonA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB) {
    Box2DPINVOKE.b2CollideEdgeAndCircle(b2Manifold.getCPtr(manifold), b2EdgeShape.getCPtr(polygonA), b2Transform.getCPtr(xfA), b2CircleShape.getCPtr(circleB), b2Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollideEdgeAndPolygon(b2Manifold manifold, b2EdgeShape edgeA, b2Transform xfA, b2PolygonShape circleB, b2Transform xfB) {
    Box2DPINVOKE.b2CollideEdgeAndPolygon(b2Manifold.getCPtr(manifold), b2EdgeShape.getCPtr(edgeA), b2Transform.getCPtr(xfA), b2PolygonShape.getCPtr(circleB), b2Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int b2ClipSegmentToLine(b2ClipVertex vOut, b2ClipVertex vIn, b2Vec2 normal, float offset, int vertexIndexA) {
    int ret = Box2DPINVOKE.b2ClipSegmentToLine(b2ClipVertex.getCPtr(vOut), b2ClipVertex.getCPtr(vIn), b2Vec2.getCPtr(normal), offset, vertexIndexA);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool b2TestOverlap(b2Shape shapeA, int indexA, b2Shape shapeB, int indexB, b2Transform xfA, b2Transform xfB) {
    bool ret = Box2DPINVOKE.b2TestOverlap__SWIG_0(b2Shape.getCPtr(shapeA), indexA, b2Shape.getCPtr(shapeB), indexB, b2Transform.getCPtr(xfA), b2Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool b2TestOverlap(b2AABB a, b2AABB b) {
    bool ret = Box2DPINVOKE.b2TestOverlap__SWIG_1(b2AABB.getCPtr(a), b2AABB.getCPtr(b));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float b2MixFriction(float friction1, float friction2) {
    float ret = Box2DPINVOKE.b2MixFriction(friction1, friction2);
    return ret;
  }

  public static float b2MixRestitution(float restitution1, float restitution2) {
    float ret = Box2DPINVOKE.b2MixRestitution(restitution1, restitution2);
    return ret;
  }

  public static int b2_blockSizeCount {
    get {
      int ret = Box2DPINVOKE.b2_blockSizeCount_get();
      return ret;
    } 
  }

  public static int b2_stackSize {
    get {
      int ret = Box2DPINVOKE.b2_stackSize_get();
      return ret;
    } 
  }

  public static int b2_maxStackEntries {
    get {
      int ret = Box2DPINVOKE.b2_maxStackEntries_get();
      return ret;
    } 
  }

  public static float b2_minPulleyLength {
    get {
      float ret = Box2DPINVOKE.b2_minPulleyLength_get();
      return ret;
    } 
  }

  public static readonly double b2_pi = Box2DPINVOKE.b2_pi_get();
  public static readonly int b2_maxManifoldPoints = Box2DPINVOKE.b2_maxManifoldPoints_get();
  public static readonly int b2_maxPolygonVertices = Box2DPINVOKE.b2_maxPolygonVertices_get();
  public static readonly double b2_aabbExtension = Box2DPINVOKE.b2_aabbExtension_get();
  public static readonly double b2_aabbMultiplier = Box2DPINVOKE.b2_aabbMultiplier_get();
  public static readonly double b2_linearSlop = Box2DPINVOKE.b2_linearSlop_get();
  public static readonly double b2_angularSlop = Box2DPINVOKE.b2_angularSlop_get();
  public static readonly double b2_polygonRadius = Box2DPINVOKE.b2_polygonRadius_get();
  public static readonly int b2_maxSubSteps = Box2DPINVOKE.b2_maxSubSteps_get();
  public static readonly int b2_maxTOIContacts = Box2DPINVOKE.b2_maxTOIContacts_get();
  public static readonly double b2_velocityThreshold = Box2DPINVOKE.b2_velocityThreshold_get();
  public static readonly double b2_maxLinearCorrection = Box2DPINVOKE.b2_maxLinearCorrection_get();
  public static readonly double b2_maxAngularCorrection = Box2DPINVOKE.b2_maxAngularCorrection_get();
  public static readonly double b2_maxTranslation = Box2DPINVOKE.b2_maxTranslation_get();
  public static readonly double b2_maxTranslationSquared = Box2DPINVOKE.b2_maxTranslationSquared_get();
  public static readonly double b2_maxRotation = Box2DPINVOKE.b2_maxRotation_get();
  public static readonly double b2_maxRotationSquared = Box2DPINVOKE.b2_maxRotationSquared_get();
  public static readonly double b2_baumgarte = Box2DPINVOKE.b2_baumgarte_get();
  public static readonly double b2_toiBaumgarte = Box2DPINVOKE.b2_toiBaumgarte_get();
  public static readonly double b2_timeToSleep = Box2DPINVOKE.b2_timeToSleep_get();
  public static readonly double b2_linearSleepTolerance = Box2DPINVOKE.b2_linearSleepTolerance_get();
  public static readonly double b2_angularSleepTolerance = Box2DPINVOKE.b2_angularSleepTolerance_get();
  public static readonly int b2_nullNode = Box2DPINVOKE.b2_nullNode_get();
}

}
